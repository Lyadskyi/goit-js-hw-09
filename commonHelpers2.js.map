{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["const form = document.querySelector('form');\n// const inputEl = document.querySelector('input')\n// const textareaEl = document.querySelector('textarea');\n\n\n// console.log(formEl);\n// console.log(inputEl);\n// console.log(textareaEl);\n// console.log(btnEl);\n\nconst STORAGE_KEY = \"feedback-form-state\";\n\nfunction readFormData(form) {\n  const emailUser = form.email.value;\n  const messageUser = form.message.value;\n  return {\n    emailUser,\n    messageUser\n  };\n};\n\n// console.log(readFormData(form));\n\nform.addEventListener('input', (event) => {\n  event.preventDefault();\n  const data = readFormData(event.currentTarget);\n  console.log(data);\n\n  const jsonData = JSON.stringify(data);\n  localStorage.setItem(STORAGE_KEY, jsonData);\n});\n\nconst rawData = localStorage.getItem(STORAGE_KEY);\nconsole.log(rawData);\nif (rawData) {\n  const data = JSON.parse(rawData);\n  form.email.value = data.emailUser;\n  form.message.value = data.messageUser;\n};\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n  localStorage.clear();\n  form.reset();\n})\n\n// Виконуй це завдання у файлах 2-form.html і 2-form.js. Розбий його на декілька підзавдань:\n\n// Використовуючи делегуваня, відстежуй на формі подію input і щоразу записуй у локальне сховище об'єкт з полями email і message,\n// у яких зберігай поточні значення полів форми. Нехай ключем для сховища буде рядок: \"feedback-form-state\".\n\n// Під час завантаження сторінки перевіряй стан сховища, і якщо там є збережені дані, то заповнюй ними поля форми.\n// В іншому випадку поля повинні бути порожніми.\n\n// Під час сабміту форми очищай сховище і поля форми, а також виводь у консоль об'єкт з полями email, message та їхніми поточними\n// значеннями.\n\n\n\n// На що буде звертати увагу ментор при перевірці:\n\n\n\n// На живій сторінці відображається форма з двома елементами форми і кнопкою типу submit.\n\n// Форма стилізована згідно з макетом.\n\n// На формі прослуховуються події input і submit.\n\n// При введенні даних у будь-який елемент форми вони записуються у локальне сховище під ключем \"feedback-form-state\",\n// збережені дані не містять пробіли по краях.\n\n// Введення даних в одне поле форми не видаляє дані в сховищі для іншого.\n\n// При оновленні сторінки дані з локального сховища підставляються в елементи форми, у полях форми відсутні undefined.\n\n// При сабміті форми є перевірка, щоб обидва елементи форми були заповнені.\n\n// Під час сабміту форми, якщо обидва елементи форми заповнені, виводиться у консоль об'єкт з полями email, message та їхніми\n// поточними значеннями, а також очищаються сховище і поля форми.\n\n// Якщо після сабміту форми ввести в будь-який елемент форми дані, то в локальному сховищі не з'являються дані від попереднього\n// сабміта.\n\n"],"names":["form","STORAGE_KEY","readFormData","emailUser","messageUser","event","data","jsonData","rawData"],"mappings":"oCAAA,MAAMA,EAAO,SAAS,cAAc,MAAM,EAUpCC,EAAc,sBAEpB,SAASC,EAAaF,EAAM,CAC1B,MAAMG,EAAYH,EAAK,MAAM,MACvBI,EAAcJ,EAAK,QAAQ,MACjC,MAAO,CACL,UAAAG,EACA,YAAAC,CACJ,CACA,CAIAJ,EAAK,iBAAiB,QAAUK,GAAU,CACxCA,EAAM,eAAc,EACpB,MAAMC,EAAOJ,EAAaG,EAAM,aAAa,EAC7C,QAAQ,IAAIC,CAAI,EAEhB,MAAMC,EAAW,KAAK,UAAUD,CAAI,EACpC,aAAa,QAAQL,EAAaM,CAAQ,CAC5C,CAAC,EAED,MAAMC,EAAU,aAAa,QAAQP,CAAW,EAChD,QAAQ,IAAIO,CAAO,EACnB,GAAIA,EAAS,CACX,MAAMF,EAAO,KAAK,MAAME,CAAO,EAC/BR,EAAK,MAAM,MAAQM,EAAK,UACxBN,EAAK,QAAQ,MAAQM,EAAK,WAC5B,CAEAN,EAAK,iBAAiB,SAAWK,GAAU,CACzCA,EAAM,eAAc,EACpB,aAAa,MAAK,EAClBL,EAAK,MAAK,CACZ,CAAC"}